Assignment - 7 A Job Ready Bootcamp in C++, DSA and IOT MySirG

Iterative Control Statements (Part - 2)
1. Write a program to find the Nth term of the Fibonnaci series.
#include <stdio.h>

int fibonacci(int n) {
    if (n <= 0) {
        return 0; // 
    }
    else if (n == 1) {
        return 0; // First Fibonacci term (0)
    }
    else if (n == 2) {
        return 1; // Second Fibonacci term (1)
    }

    int a = 0, b = 1, c;
    for (int i = 3; i <= n; i++) {
        c = a + b; 
        a = b;    
        b = c;
    }
    return c;
}

int main() {
    int n;

    printf("Enter the position (N) of the Fibonacci series: ");
    scanf("%d", &n);

    printf("The %dth term of the Fibonacci series is: %d\n", n, fibonacci(n));

    return 0;
}


2. Write a program to print first N terms of Fibonacci series
#include <stdio.h>

void printFibonacci(int n) {
    if (n <= 0) {
        printf("The number of terms should be positive.\n");
        return;
    }

    int a = 0, b = 1;
    if (n >= 1) {
        printf("%d ", a);  // Print the first term
    }
    if (n >= 2) {
        printf("%d ", b);  // Print the second term
    }

    for (int i = 3; i <= n; i++) {
        int c = a + b;  // Calculate the next Fibonacci number
        printf("%d ", c); // Print the current term
        a = b;  // Move to the next pair
        b = c;
    }
    printf("\n");
}

int main() {
    int n;

    printf("Enter the number of terms (N) of the Fibonacci series: ");
    scanf("%d", &n);

    printFibonacci(n);

    return 0;
}

3. Write a program to check whether a given number is there in the Fibonacci
series or not.
#include <stdio.h>

int isFibonacci(int num) {
    if (num < 0) {
        return 0;
    }

    int a = 0, b = 1;
    if (num == a || num == b) {
        return 1; 
    }

    int c;
    while (b <= num) {
        c = a + b;
        a = b;
        b = c;
        if (b == num) {
            return 1;
        }
    }

    return 0; 
}

int main() {
    int number;

    printf("Enter a number: ");
    scanf("%d", &number);

    if (isFibonacci(number)) {
        printf("%d is in the Fibonacci series.\n", number);
    } else {
        printf("%d is not in the Fibonacci series.\n", number);
    }

    return 0;
}

4. Write a program to calculate HCF of two numbers
#include <stdio.h>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int num1, num2;

    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);

    printf("The GCD of %d and %d is %d\n", num1, num2, gcd(num1, num2));

    return 0;
}

5. Write a program to check whether two given numbers are co-prime
numbers or not

#include <stdio.h>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int areCoPrime(int a, int b) {
    return gcd(a, b) == 1;
}

int main() {
    int num1, num2;

    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);

    if (areCoPrime(num1, num2)) {
        printf("%d and %d are co-prime numbers.\n", num1, num2);
    } else {
        printf("%d and %d are not co-prime numbers.\n", num1, num2);
    }

    return 0;
}

6. Write a program to print all Prime numbers under 100
#include <stdio.h>
#include <stdbool.h>

bool isPrime(int num) {
    if (num <= 1) {
        return false; 
    }
    if (num == 2) {
        return true; 
    }
    if (num % 2 == 0) {
        return false; 
    }
    for (int i = 3; i * i <= num; i += 2) {
        if (num % i == 0) {
            return false; 
        }
    }
    return true;
}

int main() {
    printf("Prime numbers less than 100 are:\n");

    for (int i = 2; i < 100; i++) {
        if (isPrime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");

    return 0;
}


7. Write a program to print all Prime numbers between two given numbers
#include <stdio.h>
#include <stdbool.h>

bool isPrime(int num) {
    if (num <= 1) {
        return false; 
    }
    if (num == 2) {
        return true;  
    }
    if (num % 2 == 0) {
        return false; 
    }
    for (int i = 3; i * i <= num; i += 2) {
        if (num % i == 0) {
            return false; 
        }
    }
    return true;
}

int main() {
    int start, end;

    // Input the range from the user
    printf("Enter the start of the range: ");
    scanf("%d", &start);
    printf("Enter the end of the range: ");
    scanf("%d", &end);

    // Print prime numbers in the given range
    printf("Prime numbers between %d and %d are:\n", start, end);
    
    // Ensure start is not less than 2 (smallest prime number)
    if (start < 2) {
        start = 2;
    }

    for (int i = start; i <= end; i++) {
        if (isPrime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");

    return 0;
}


8. Write a program to find next Prime number of a given number
9. Write a program to check whether a given number is an Armstrong number
or not
10. Write a program to print all Armstrong numbers under 1000